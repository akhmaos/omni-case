// Code generated by go-swagger; DO NOT EDIT.

package process

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/akhmaos/omni-case/internal/api/restapi/models"
)

// PostProcessItemsHandlerFunc turns a function with the right signature into a post process items handler
type PostProcessItemsHandlerFunc func(PostProcessItemsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostProcessItemsHandlerFunc) Handle(params PostProcessItemsParams) middleware.Responder {
	return fn(params)
}

// PostProcessItemsHandler interface for that can handle valid post process items params
type PostProcessItemsHandler interface {
	Handle(PostProcessItemsParams) middleware.Responder
}

// NewPostProcessItems creates a new http.Handler for the post process items operation
func NewPostProcessItems(ctx *middleware.Context, handler PostProcessItemsHandler) *PostProcessItems {
	return &PostProcessItems{Context: ctx, Handler: handler}
}

/*
	PostProcessItems swagger:route POST /process/items Process postProcessItems

process_items

Processing items via external service
*/
type PostProcessItems struct {
	Context *middleware.Context
	Handler PostProcessItemsHandler
}

func (o *PostProcessItems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostProcessItemsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostProcessItemsBody post process items body
//
// swagger:model PostProcessItemsBody
type PostProcessItemsBody struct {

	// items for processing
	// Required: true
	Items []*models.Item `json:"items"`
}

// Validate validates this post process items body
func (o *PostProcessItemsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProcessItemsBody) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"items", "body", o.Items); err != nil {
		return err
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post process items body based on the context it is used
func (o *PostProcessItemsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProcessItemsBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostProcessItemsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProcessItemsBody) UnmarshalBinary(b []byte) error {
	var res PostProcessItemsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostProcessItemsOKBody post process items o k body
//
// swagger:model PostProcessItemsOKBody
type PostProcessItemsOKBody struct {

	// ok
	Ok bool `json:"ok,omitempty"`
}

// Validate validates this post process items o k body
func (o *PostProcessItemsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post process items o k body based on context it is used
func (o *PostProcessItemsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostProcessItemsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProcessItemsOKBody) UnmarshalBinary(b []byte) error {
	var res PostProcessItemsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
