// Code generated by go-swagger; DO NOT EDIT.

package standard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/akhmaos/omni-case/internal/api/restapi/models"
)

// HealthCheckReader is a Reader for the HealthCheck structure.
type HealthCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HealthCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHealthCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewHealthCheckInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewHealthCheckOK creates a HealthCheckOK with default headers values
func NewHealthCheckOK() *HealthCheckOK {
	return &HealthCheckOK{}
}

/*
HealthCheckOK describes a response with status code 200, with default header values.

ok
*/
type HealthCheckOK struct {
	Payload *HealthCheckOKBody
}

// IsSuccess returns true when this health check o k response has a 2xx status code
func (o *HealthCheckOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this health check o k response has a 3xx status code
func (o *HealthCheckOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health check o k response has a 4xx status code
func (o *HealthCheckOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this health check o k response has a 5xx status code
func (o *HealthCheckOK) IsServerError() bool {
	return false
}

// IsCode returns true when this health check o k response a status code equal to that given
func (o *HealthCheckOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the health check o k response
func (o *HealthCheckOK) Code() int {
	return 200
}

func (o *HealthCheckOK) Error() string {
	return fmt.Sprintf("[GET /healthCheck][%d] healthCheckOK  %+v", 200, o.Payload)
}

func (o *HealthCheckOK) String() string {
	return fmt.Sprintf("[GET /healthCheck][%d] healthCheckOK  %+v", 200, o.Payload)
}

func (o *HealthCheckOK) GetPayload() *HealthCheckOKBody {
	return o.Payload
}

func (o *HealthCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(HealthCheckOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHealthCheckInternalServerError creates a HealthCheckInternalServerError with default headers values
func NewHealthCheckInternalServerError() *HealthCheckInternalServerError {
	return &HealthCheckInternalServerError{}
}

/*
HealthCheckInternalServerError describes a response with status code 500, with default header values.

pkg server error
*/
type HealthCheckInternalServerError struct {
	Payload models.InternalServerError
}

// IsSuccess returns true when this health check internal server error response has a 2xx status code
func (o *HealthCheckInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this health check internal server error response has a 3xx status code
func (o *HealthCheckInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this health check internal server error response has a 4xx status code
func (o *HealthCheckInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this health check internal server error response has a 5xx status code
func (o *HealthCheckInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this health check internal server error response a status code equal to that given
func (o *HealthCheckInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the health check internal server error response
func (o *HealthCheckInternalServerError) Code() int {
	return 500
}

func (o *HealthCheckInternalServerError) Error() string {
	return fmt.Sprintf("[GET /healthCheck][%d] healthCheckInternalServerError  %+v", 500, o.Payload)
}

func (o *HealthCheckInternalServerError) String() string {
	return fmt.Sprintf("[GET /healthCheck][%d] healthCheckInternalServerError  %+v", 500, o.Payload)
}

func (o *HealthCheckInternalServerError) GetPayload() models.InternalServerError {
	return o.Payload
}

func (o *HealthCheckInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
HealthCheckOKBody health check o k body
swagger:model HealthCheckOKBody
*/
type HealthCheckOKBody struct {

	// ok
	Ok bool `json:"ok,omitempty"`
}

// Validate validates this health check o k body
func (o *HealthCheckOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this health check o k body based on context it is used
func (o *HealthCheckOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *HealthCheckOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HealthCheckOKBody) UnmarshalBinary(b []byte) error {
	var res HealthCheckOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
